openapi: 3.0.0
info:
  title: Sciant Task API
  description: An API that allows Login and creation of a user.
  version: 1.0.0

paths:
  /user:
    post:
      security:
        - cookieAuth: []
      summary: Create User
      description: 'Create a user once logged in'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UserRequestSchema'
      responses:
        200:
          description: User created successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UserCreateResponseSchema'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /login:
    post:
      summary: Log in User
      description: 'Log in User'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UserRequestSchema'
      responses:
        200:
          description: User created successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UserLoginResponseSchema'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not Found
  /ticker:
    get:
      security:
        - cookieAuth: []
      summary: Get tickers
      description: 'Get all the tickers inside the database'
      responses:
        200:
          description: Tickers retrieved successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TickerResponseSchema'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
    post:
      security:
        - cookieAuth: []
      summary: Create a ticker
      description: 'Create a ticker'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TickerPostRequestSchema'
      responses:
        200:
          description: Ticker created successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TickerResponseSchema'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
    put:
      security:
        - cookieAuth: []
      summary: Update a ticker
      description: 'Update a ticker'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TickerPutRequestSchema'
      responses:
        200:
          description: Ticker created successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TickerResponseSchema'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
    delete:
      security:
        - cookieAuth: []
      summary: Delete a ticker
      description: 'Delete a ticker'
      # requestBody:
      #   Requires you to pass an ID.
      responses:
        200:
          description: Ticker created successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TickerResponseSchema'
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
  schemas:
    UserRequestSchema:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
      example: 
        email: "tonigashi@gmail.com"
        password: "!ToniGashi2"
    TickerPostRequestSchema:
      type: object
      properties:
        name:
          type: string
        symbol:
          type: string
        price:
          type: integer
      example:
        name: "Bitcoin"
        symbol: "BTC"
        price: "25"
    TickerPutRequestSchema:
      type: object
      properties:
        id: 
          type: string
        name:
          type: string
        symbol:
          type: string
        price:
          type: integer
      example:
        id: "ac105a40-93d6-11ec-9250-5578e58c10b9"
        name: "Bitcoin"
        symbol: "BTC"
        price: "25"




    TickerGetResponseSchema:
      type: object
      properties:
        message:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              symbol:
                type: string
              date:
                type: string
              price:
                type: integer
            example:
              id: "e20c00b0-93d4-11ec-a0dd-b5bbfe63442d"
              name: "Bitcoin"
              symbol: "BTC"
              date: "2022-02-22T11:45:07.588Z"
              price: "25"
    TickerResponseSchema:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
      example:
        status: 200
        message: "Ticker {action} successfully"

    UserLoginResponseSchema:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
        message:
          type: string
        accessToken:
          type: string
      example: 
        status: 200
        message: "User login successfully"
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRvbmlnYXNoaUBnbWFpbC5jb20iLCJpYXQiOjE2NDU1MjY1Mzh9.YVlbijNb9Sl7LIhX6NuT6ZofsCmmWp0wUUTNoM8cHmQ"
    UserCreateResponseSchema:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
        message:
          type: string
      example: 
        status: 200
        message: "User login successfully"
    
